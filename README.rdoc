== SET UP YOUR TESTING TOOLCHAIN

Following these steps will get you set up for BDD in Rails 3.2.6, using ActiveRecord. These instructions are gleaned
from training that provided by ThoughtBot. To understand why you would want to set up your environment this way,
and to learn what to do with the tools once you have them, I recommend taking Test Driven Rails at ThoughtBot.


== Environment

        Ruby 1.9.3
        Rails 3.2

== Primary Tools

        cucumber (integration)
        rspec (unit)

== Other

high_voltage allows you to add static content routes without controllers.

== Notes

if cucumber gives you a javascript error add to your gemfile: 
        gem 'therubyracer', require: 'v8'


== STEP BY STEP STUFF
Set up your project:
        rails g myapp --skip-test-unit

SET UP
1. delete public/index.html

2. set up your gemfile:

        group :development, :test do
        	gem 'rspec-rails'
        end

        group :test do
        	gem 'spork'
        	gem 'cucumber-rails', require: false
        	gem 'database_cleaner'
        	#gem 'capybara'
        	#gem 'shoulda-matchers'
        	#gem 'bourne' #for spying
        end

        group :development do
        	gem 'guard-spork'
        end


3. use your console:
        bundle
        guard init spork
        rails g cucumber:install
        rails g rspec:install

4. Add to your Guardfile the following line in the guard 'spork' block:
        watch('config/routes.rb')

5. make your life easier
   *     open features/support/env.rb -- delete all comments
   *     open spc/spec_helper.rb -- delete all comments

6. go back to your console:
   *     spork rspec --bootstrap
   *     spork cucumber --bootstrap

7. set up your spork

   * open features/support/env.rb -- delete all comments and split your directives between prefork and each_run.
     You essentially move everything to prefork, except the line that starts "Dir[Rails.root.join...." that moves to each_run.
     Then add to prefork: 
        require 'capybara/rspec'

     Here is the env.rb file:
        require 'rubygems'
        require 'spork'
        
        Spork.prefork do
          ENV["RAILS_ENV"] ||= 'test'
          require File.expand_path("../../config/environment", __FILE__)
          require 'rspec/rails'
          require 'rspec/autorun'
          RSpec.configure do |config|
            config.fixture_path = "#{::Rails.root}/spec/fixtures"
            config.use_transactional_fixtures = true
            config.infer_base_class_for_anonymous_controllers = false
            config.order = "random"
          end
        end

        Spork.each_run do
          Dir[Rails.root.join("spec/support/**/*.rb")].each {|f| require f}
        end
   


   * open config/cucumber.yml -- line 4 ADD "--drb"  before "--strict"

   * open /.rspec  and add "--drb" to the end of the first line.

7. set up spying with mocha

   * open spec/spec_helper, and add to the RSpec.configure block:
        config.mock_with :mocha



== You want to test your JavaScript?

Use jasmine!

Put this in your Gemfile:

        group :test do
         gem 'evergreen'
        end

And then on the command line: 
        evergreen serve

Now add @javascript notations to your Features and Scenarios where you'd like, and log in to evergreen to check your js tests.